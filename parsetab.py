
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightIDIFWHILETYPErightASSIGNleftLTLTEGTGTEleftPLUSMINUSleftMODDIVENTTIMESDIVIDEleftEXPleftLPARENTRPARENTASSIGN BLINK BOOKED CALL COMMA CONST DELAY DELETE DIVENT DIVIDE DOT ELSE EXP F FALSE FOR GLOBAL GT GTE ID IF IN INSERT INT LCORCH LEN LENGHTERROR LPARENT LT LTE MAIN MINUS MOD NE NEG PARENTCL PARENTCR PLUS PROCEDURE RANGE RCORCH RPARENT SEMICOLON SHAPEA SHAPEC SHAPEF STEP T TIMES TP TRUE TYPE VARERROR WHILEprogram : block block : assignment functionassignment : ID ASSIGN value SEMICOLON blockassignment : ID ASSIGN arithmetic SEMICOLON blockassignment : ID COMMA ID ASSIGN value COMMA value SEMICOLON blockassignment : emptyfunction : typefunction : emptytype : TYPE LPARENT ID RPARENT SEMICOLON block arithmetic : termarithmetic : adding_operator term arithmetic : arithmetic adding_operator termterm : factorterm : term multiplying_operator factorfactor : INTfactor : IDfactor : LPARENT arithmetic RPARENTadding_operator : PLUSadding_operator : MINUSmultiplying_operator : TIMESmultiplying_operator : EXPmultiplying_operator : DIVIDEmultiplying_operator : DIVENTmultiplying_operator : MODvalue : FALSEvalue : TRUEvalue : IDvalue : INTrelation : ASSIGNrelation : NErelation : LTrelation : GTrelation : LTErelation : GTEempty : '
    
_lr_action_items = {'ID':([0,10,11,12,20,22,23,24,27,28,29,30,31,32,33,34,35,40,50,51,54,],[4,13,25,26,38,-18,-19,38,4,4,38,38,-20,-21,-22,-23,-24,47,4,47,4,]),'TYPE':([0,3,5,6,7,8,27,28,42,43,50,52,54,55,],[-35,9,-6,-2,-7,-8,-35,-35,-3,-4,-35,-9,-35,-5,]),'$end':([0,1,2,3,5,6,7,8,27,28,42,43,50,52,54,55,],[-35,0,-1,-35,-6,-2,-7,-8,-35,-35,-3,-4,-35,-9,-35,-5,]),'ASSIGN':([4,25,],[10,40,]),'COMMA':([4,16,17,47,48,49,],[11,-25,-26,-27,51,-28,]),'LPARENT':([9,10,20,22,23,24,29,30,31,32,33,34,35,],[12,24,24,-18,-19,24,24,24,-20,-21,-22,-23,-24,]),'FALSE':([10,40,51,],[16,16,16,]),'TRUE':([10,40,51,],[17,17,17,]),'INT':([10,20,22,23,24,29,30,31,32,33,34,35,40,51,],[18,37,-18,-19,37,37,37,-20,-21,-22,-23,-24,49,49,]),'PLUS':([10,13,15,18,19,21,24,36,37,38,39,44,45,46,],[22,-16,22,-15,-10,-13,22,-11,-15,-16,22,-12,-14,-17,]),'MINUS':([10,13,15,18,19,21,24,36,37,38,39,44,45,46,],[23,-16,23,-15,-10,-13,23,-11,-15,-16,23,-12,-14,-17,]),'SEMICOLON':([13,14,15,16,17,18,19,21,36,37,38,41,44,45,46,47,49,53,],[-16,27,28,-25,-26,-15,-10,-13,-11,-15,-16,50,-12,-14,-17,-27,-28,54,]),'TIMES':([13,18,19,21,36,37,38,44,45,46,],[-16,-15,31,-13,31,-15,-16,31,-14,-17,]),'EXP':([13,18,19,21,36,37,38,44,45,46,],[-16,-15,32,-13,32,-15,-16,32,-14,-17,]),'DIVIDE':([13,18,19,21,36,37,38,44,45,46,],[-16,-15,33,-13,33,-15,-16,33,-14,-17,]),'DIVENT':([13,18,19,21,36,37,38,44,45,46,],[-16,-15,34,-13,34,-15,-16,34,-14,-17,]),'MOD':([13,18,19,21,36,37,38,44,45,46,],[-16,-15,35,-13,35,-15,-16,35,-14,-17,]),'RPARENT':([19,21,26,36,37,38,39,44,45,46,],[-10,-13,41,-11,-15,-16,46,-12,-14,-17,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([0,27,28,50,54,],[2,42,43,52,55,]),'assignment':([0,27,28,50,54,],[3,3,3,3,3,]),'empty':([0,3,27,28,50,54,],[5,8,5,5,5,5,]),'function':([3,],[6,]),'type':([3,],[7,]),'value':([10,40,51,],[14,48,53,]),'arithmetic':([10,24,],[15,39,]),'term':([10,20,24,29,],[19,36,19,44,]),'adding_operator':([10,15,24,39,],[20,29,20,29,]),'factor':([10,20,24,29,30,],[21,21,21,21,45,]),'multiplying_operator':([19,36,44,],[30,30,30,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block','program',1,'p_program','Parser.py',21),
  ('block -> assignment function','block',2,'p_block','Parser.py',25),
  ('assignment -> ID ASSIGN value SEMICOLON block','assignment',5,'p_simpleAssignment0','Parser.py',29),
  ('assignment -> ID ASSIGN arithmetic SEMICOLON block','assignment',5,'p_simpleAssignment1','Parser.py',33),
  ('assignment -> ID COMMA ID ASSIGN value COMMA value SEMICOLON block','assignment',9,'p_doubleAssignment','Parser.py',37),
  ('assignment -> empty','assignment',1,'p_assignmentEmp','Parser.py',41),
  ('function -> type','function',1,'p_function','Parser.py',45),
  ('function -> empty','function',1,'p_functionEmp','Parser.py',49),
  ('type -> TYPE LPARENT ID RPARENT SEMICOLON block','type',6,'p_type','Parser.py',53),
  ('arithmetic -> term','arithmetic',1,'p_arithmetic0','Parser.py',57),
  ('arithmetic -> adding_operator term','arithmetic',2,'p_arithmetic1','Parser.py',60),
  ('arithmetic -> arithmetic adding_operator term','arithmetic',3,'p_arithmetic2','Parser.py',64),
  ('term -> factor','term',1,'p_term0','Parser.py',68),
  ('term -> term multiplying_operator factor','term',3,'p_term1','Parser.py',72),
  ('factor -> INT','factor',1,'p_factor0','Parser.py',76),
  ('factor -> ID','factor',1,'p_factor1','Parser.py',80),
  ('factor -> LPARENT arithmetic RPARENT','factor',3,'p_factor2','Parser.py',84),
  ('adding_operator -> PLUS','adding_operator',1,'p_addingOp0','Parser.py',93),
  ('adding_operator -> MINUS','adding_operator',1,'p_addingOp1','Parser.py',97),
  ('multiplying_operator -> TIMES','multiplying_operator',1,'p_multiplyingOp0','Parser.py',101),
  ('multiplying_operator -> EXP','multiplying_operator',1,'p_multiplyingOp1','Parser.py',104),
  ('multiplying_operator -> DIVIDE','multiplying_operator',1,'p_multiplyingOp2','Parser.py',108),
  ('multiplying_operator -> DIVENT','multiplying_operator',1,'p_multiplyingOp3','Parser.py',112),
  ('multiplying_operator -> MOD','multiplying_operator',1,'p_multiplyingOp4','Parser.py',116),
  ('value -> FALSE','value',1,'p_value0','Parser.py',120),
  ('value -> TRUE','value',1,'p_value1','Parser.py',124),
  ('value -> ID','value',1,'p_value2','Parser.py',128),
  ('value -> INT','value',1,'p_value3','Parser.py',132),
  ('relation -> ASSIGN','relation',1,'p_relation0','Parser.py',136),
  ('relation -> NE','relation',1,'p_relation1','Parser.py',140),
  ('relation -> LT','relation',1,'p_relation2','Parser.py',144),
  ('relation -> GT','relation',1,'p_relation3','Parser.py',148),
  ('relation -> LTE','relation',1,'p_relation4','Parser.py',152),
  ('relation -> GTE','relation',1,'p_relation5','Parser.py',156),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',160),
]
